---
- name: Подготовка образов и деплой стека в Swarm
  hosts: managers
  become: true
  vars:
    project_dir: /opt/spark-cluster
  tasks:
    - name: Создать директорию проекта
      file:
        path: "{{ project_dir }}"
        state: directory

    - name: Копировать docker-compose файл
      copy:
        src: ./compose.yaml
        dest: "{{ project_dir }}/compose.yaml"

    - name: Копировать .env файл
      copy:
        src: ./.env
        dest: "{{ project_dir }}/.env"
    
    - name: Копировать Makefile
      copy:
        src: ./Makefile
        dest: "{{ project_dir }}/Makefile"
    
    - name: Копировать scripts директорию
      copy:
        src: ./scripts
        dest: "{{ project_dir }}/scripts"
        mode: '0755'
    
    - name: Копировать sql директорию
      copy:
        src: ./sql
        dest: "{{ project_dir }}/sql"
        mode: '0755'
    
    - name: Копировать superset директорию
      copy:
        src: ./superset
        dest: "{{ project_dir }}/superset"
        mode: '0755'
    
    - name: Копировать raw директорию
      copy:
        src: ./raw
        dest: "{{ project_dir }}/raw"
        mode: '0755'
    
    - name: Ротация секретов
      shell: "make rotate-secrets"
      args:
        chdir: "{{ project_dir }}"
    
    - name: Создать папку secrets на локальной машине
      become: false
      delegate_to: localhost
      file:
        path: ./secrets
        state: directory
        mode: '0755'

    - name: Сохранить новые секреты на локальной машине
      fetch:
        src: "{{ project_dir }}/.env"
        dest: "./secrets/.env"
        flat: yes


- name: Деплой Docker Swarm стека и последующая обработка данных
  hosts: managers
  become: true
  vars:
    project_dir: /opt/spark-cluster
  tasks:
    - name: Найти имя первой worker-ноды
      shell: >
        docker node ls --format '{{ '{{' }}.Hostname{{ '}}' }} {{ '{{' }}.Status{{ '}}' }} {{ '{{' }}.ManagerStatus{{ '}}' }}' | grep -v Leader | awk 'NR==1{print $1}'
      register: worker_node_name
      changed_when: false

    - name: Получить IP worker-ноды
      shell: >
        docker node inspect -f '{{ '{{' }}.Status.Addr{{ '}}' }}' {{ worker_node_name.stdout }}
      register: worker_ip
      changed_when: false

    - name: Обновить .env с IP worker-ноды
      lineinfile:
        path: "{{ project_dir }}/.env"
        regexp: '^S3_EXTERNAL_HOST='
        line: "S3_EXTERNAL_HOST={{ worker_ip.stdout }}"
      when: worker_ip.stdout is defined and worker_ip.stdout != ""

    - name: Деплой docker stack
      command: make up
      args:
        chdir: "{{ project_dir }}"

    - name: Подождать 5 секунд для инициализации сервисов
      pause:
        seconds: 5

    - name: Загрузить raw данные в S3
      command: make upload-raw-to-s3
      args:
        chdir: "{{ project_dir }}"

    - name: Генерировать Trino схемы из CSV
      command: make generate-schemas
      args:
        chdir: "{{ project_dir }}"
    
    - name: Создать Trino схемы в базе данных
      command: make create-trino-schemas
      args:
        chdir: "{{ project_dir }}"

    - name: Настроить Superset (датасеты и дашборды)
      command: make setup-superset
      args:
        chdir: "{{ project_dir }}"
    
    - name: Удалить локальные raw данные для экономии места
      file:
        path: "{{ project_dir }}/raw"
        state: absent
